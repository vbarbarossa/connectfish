source('R/MASTER.R')
library(sf); library(foreach)
### HydroBASINS data ##################################################################
if(file.exists('proc/hybas12poly_global_w_area_main.rds')){
hb_data <- readRDS('proc/hybas12poly_global_w_area_main.rds')
}else{
# read hydrobasins data
hb_data <- foreach(i = c('af','ar','as','au','eu','gr','na','sa','si'),.combine = 'rbind') %do% st_read(paste0('F:/hydroBASINS/global_lev12/hybas_',i,'_lev12_v1c.shp'))
# add basin area
hb_data_frame <- as.data.frame(hb_data)[,-ncol(hb_data)]
main_bas_area <- do.call('rbind',lapply(split(hb_data_frame,hb_data_frame$MAIN_BAS),function(x) data.frame(MAIN_BAS = unique(x$MAIN_BAS),MAIN_BAS_AREA = sum(x$SUB_AREA))))
hb_data <- merge(hb_data,main_bas_area,by='MAIN_BAS')
# save as rds
saveRDS(hb_data,'proc/hybas12poly_global_w_area_main.rds')
}
source('~/RU_cluster/milkunB/connectfish/R/calculate_CI2.R', echo=TRUE)
fishbase$iucn_name[fishbase$AnaCat == 'Diad']
### PREPROCESS ######################################################
# packages needed
library(sf); library(foreach); library(rfishbase)
install.packages(c("rnaturalearth", "viridis"))
library(viridis)
library(rnaturalearth)
install.packages("spatstat")
source('~/RU_cluster/milkunB/connectfish/R/table_summary.R', echo=TRUE)
pb <- ggplot() +
# geom_violin(data = t, aes(x= 1,y = value, color = type),draw_quantiles = c(0.25,0.5,0.75)) +
geom_boxplot(data = t, aes(y = value, color = variable),notch = F, alpha = 0.2,outlier.size = 0.7,width = 0.02, position = position_dodge2(preserve = "total")) +
scale_color_manual(values = c('Grey60','Grey20')) +
ylab('CI [%]') +
facet_wrap('type',ncol = 2) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=18, size=3,show_guide = FALSE) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.position = 'bottom',
legend.title = element_blank(),
axis.text.x=element_blank())
pb <- ggplot() +
# geom_violin(data = t, aes(x= 1,y = value, color = type),draw_quantiles = c(0.25,0.5,0.75)) +
geom_boxplot(data = t, aes(y = value, color = variable),notch = F, alpha = 0.2,outlier.size = 0.7,width = 0.02, position = position_dodge2(preserve = "total")) +
scale_color_manual(values = c('Grey60','Grey20')) +
ylab('CI [%]') +
stat_summary(data = t, aes(y = value, x = variable),fun.y=mean, colour="black", geom="point",
shape=18, size=3,show.legend = FALSE) +
facet_wrap('type',ncol = 2) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.position = 'bottom',
legend.title = element_blank(),
axis.text.x=element_blank())
?ggplot2::stat_summary
install.packages(c("fmsb", "lme4"))
# function thsat calcuates CI
calc_ci <- function(sub_areas_ordered,alpha=0.55){
L <- sub_areas_ordered**alpha
# diadromous
dci <- (L[1]/sum(L))*100
# non-diadromous
nci <- (sum(L**2)/sum(L)**2)*100
return(data.frame(diadromous = dci, non-diadromous = nci))
}
# function thsat calcuates CI
calc_ci <- function(sub_areas_ordered, alpha=0.55){
L <- sub_areas_ordered**alpha
# diadromous
dci <- (L[1]/sum(L))*100
# non-diadromous
nci <- (sum(L**2)/sum(L)**2)*100
return(data.frame(diadromous = dci, non-diadromous = nci))
}
# function thsat calcuates CI
calc_ci <- function(sub_areas_ordered, alpha=0.55){
L <- sub_areas_ordered**alpha
# diadromous
dci <- (L[1]/sum(L))*100
# non-diadromous
nci <- (sum(L**2)/sum(L)**2)*100
return(data.frame(diadromous = dci,
non-diadromous = nci))
}
# function thsat calcuates CI
calc_ci <- function(sub_areas_ordered, alpha=0.55){
L <- sub_areas_ordered**alpha
# diadromous
dci <- ( L[1]/sum(L) ) * 100
# non-diadromous
nci <- ( sum(L**2)/sum(L)**2 ) * 100
return(
data.frame(
diadromous = dci,
nondiadromous = nci)
)
}
calc_ci(100)
calc_ci(c(20,80))
calc_ci(c(20,35,30,15))
c(20,35,30,15)**0.55
sum(c(20,35,30,15)**0.55)
sum(c(20,80)**0.55)
50**0.55
(50+50)**0.55
50**0.55*2
plot(1:100,(1:100)**0.55)
4**0.55
4**0.55*2
8**0.55
# from model
calc_ci <- function(occ, alpha=0.55){
L <- occ$SUB_AREA**alpha
# diad
sa_cur = sum(L[occ$group_cur == min(occ$group_cur)])
dci = sa_cur/sum(L)*100
# non-diad
sa_cur = 0
for(i in unique(occ$group_cur)) sa_cur = sa_cur + sum(L[occ$group_cur == i])**2
nci = sa_cur/(sum(L)**2)*100
return(
data.frame(
diadromous = dci,
nondiadromous = nci)
)
}
calc_ci(data.frame(SUB_AREA = c(20,35,30,15),group_cur = c(1,1,1,1)))
calc_ci(data.frame(SUB_AREA = c(20,35,30,15),group_cur = c(1,2,2,2)))
calc_ci(data.frame(SUB_AREA = c(20,35,30,15),group_cur = c(1,2,3,4)))
